"""feat: add crm table

Revision ID: efb51b17def0
Revises: 18a9ae60dfff
Create Date: 2025-07-30 15:25:59.560554

"""
from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'efb51b17def0'
down_revision: str | Sequence[str] | None = '18a9ae60dfff'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('lost_reason',
    sa.Column('lost_reason_id', sa.Integer(), sa.Identity(always=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.CheckConstraint('length(name) > 0', name='lost_reason_name_check'),
    sa.PrimaryKeyConstraint('lost_reason_id')
    )
    op.create_table('sale_stage',
    sa.Column('sale_stage_id', sa.Integer(), sa.Identity(always=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('next_sale_stage_id', sa.Integer(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('length(name) > 0', name='sale_stage_name_check'),
    sa.ForeignKeyConstraint(['next_sale_stage_id'], ['sale_stage.sale_stage_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('sale_stage_id')
    )
    op.create_table('source',
    sa.Column('source_id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('utm_source', sa.String(length=255), nullable=True),
    sa.Column('utm_medium', sa.String(length=255), nullable=True),
    sa.Column('utm_campaign', sa.String(length=255), nullable=True),
    sa.Column('utm_term', sa.String(length=255), nullable=True),
    sa.Column('utm_content', sa.String(length=255), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('length(name) > 0', name='source_name_check'),
    sa.CheckConstraint('length(utm_campaign) > 0', name='source_utm_campaign_check'),
    sa.CheckConstraint('length(utm_content) > 0', name='source_utm_content_check'),
    sa.CheckConstraint('length(utm_medium) > 0', name='source_utm_medium_check'),
    sa.CheckConstraint('length(utm_source) > 0', name='source_utm_source_check'),
    sa.CheckConstraint('length(utm_term) > 0', name='source_utm_term_check'),
    sa.PrimaryKeyConstraint('source_id'),
    sa.UniqueConstraint('utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', name='source_utm_unique')
    )
    op.create_table('source_to_sale_stage',
    sa.Column('source_id', sa.BigInteger(), nullable=False),
    sa.Column('sale_stage_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['sale_stage_id'], ['sale_stage.sale_stage_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['source_id'], ['source.source_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('source_id', 'sale_stage_id')
    )
    op.create_table('lead',
    sa.Column('lead_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.BigInteger(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['lead_id'], ['user.user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['source_id'], ['source.source_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('lead_id')
    )
    op.create_table('deal',
    sa.Column('deal_id', sa.UUID(), nullable=False),
    sa.Column('sale_stage_id', sa.Integer(), nullable=False),
    sa.Column('lead_id', sa.UUID(), nullable=False),
    sa.Column('deal_value', postgresql.MONEY(), nullable=False),
    sa.Column('probability', sa.NUMERIC(precision=3, scale=2), nullable=False),
    sa.Column('deal_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('lost_reason_id', sa.Integer(), nullable=True),
    sa.Column('manager_id', sa.UUID(), nullable=True),
    sa.Column('close_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('deal_value::numeric >= 0', name='deal_value_positive'),
    sa.CheckConstraint('priority between -1 and 10', name='deal_priority_range'),
    sa.CheckConstraint('probability between 0 and 1', name='deal_probability_range'),
    sa.ForeignKeyConstraint(['lead_id'], ['lead.lead_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lost_reason_id'], ['lost_reason.lost_reason_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['manager_id'], ['user.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['sale_stage_id'], ['sale_stage.sale_stage_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('deal_id')
    )
    op.create_table('deal_history',
    sa.Column('deal_history_id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
    sa.Column('deal_id', sa.UUID(), nullable=False),
    sa.Column('sale_stage_id', sa.Integer(), nullable=False),
    sa.Column('probability', sa.NUMERIC(precision=3, scale=2), nullable=False),
    sa.Column('lost_reason_id', sa.Integer(), nullable=True),
    sa.Column('manager_id', sa.UUID(), nullable=True),
    sa.Column('changed_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('probability between 0 and 1', name='deal_history_probability_range'),
    sa.ForeignKeyConstraint(['deal_id'], ['deal.deal_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lost_reason_id'], ['lost_reason.lost_reason_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['manager_id'], ['user.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['sale_stage_id'], ['sale_stage.sale_stage_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('deal_history_id')
    )
    op.create_table('deal_message',
    sa.Column('deal_message_id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
    sa.Column('deal_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('message', sa.String(length=4096), nullable=False),
    sa.Column('is_updated', sa.Boolean(), nullable=False),
    sa.Column('viewed_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('length(message) > 0', name='deal_message_check'),
    sa.ForeignKeyConstraint(['deal_id'], ['deal.deal_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('deal_message_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('deal_message')
    op.drop_table('deal_history')
    op.drop_table('deal')
    op.drop_table('lead')
    op.drop_table('source_to_sale_stage')
    op.drop_table('source')
    op.drop_table('sale_stage')
    op.drop_table('lost_reason')
    # ### end Alembic commands ###
