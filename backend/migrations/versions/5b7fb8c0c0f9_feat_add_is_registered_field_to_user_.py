"""feat: add is_registered field to user table

Revision ID: 5b7fb8c0c0f9
Revises: fca9c4494a2a
Create Date: 2025-07-11 04:22:46.861867

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "5b7fb8c0c0f9"
down_revision: str | Sequence[str] | None = "fca9c4494a2a"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user", sa.Column("is_registered", sa.Boolean(), nullable=False)
    )
    # ### end Alembic commands ###
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_user_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO user_deleted (user_id, login, password, role_id, is_registered, deleted_at)
        VALUES (OLD.user_id, OLD.login, OLD.password, OLD.role_id, OLD.is_registered, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_user_deleted
    BEFORE DELETE ON "user"
    FOR EACH ROW EXECUTE FUNCTION move_to_user_deleted();
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("user", "is_registered")
    # ### end Alembic commands ###
    op.execute("drop trigger if exists trigger_move_to_user_deleted;")
    op.execute("drop function if exists move_to_user_deleted;")
