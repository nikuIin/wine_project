"""feat: add main tables for articles

Revision ID: 5fd0d3570faf
Revises: 5b7fb8c0c0f9
Create Date: 2025-07-16 17:03:41.054519

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "5fd0d3570faf"
down_revision: str | Sequence[str] | None = "5b7fb8c0c0f9"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "article_deleted",
        sa.Column("article_id", sa.UUID(), nullable=False),
        sa.Column("author_id", sa.UUID(), nullable=False),
        sa.Column("slug", sa.String(length=255), nullable=False),
        sa.Column("views_count", sa.Integer(), nullable=False),
        sa.Column("image_src", sa.String(length=255), nullable=True),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "views_count >= 0", name="article_views_count_check"
        ),
        sa.PrimaryKeyConstraint("article_id"),
    )
    op.create_table(
        "article_translate_deleted",
        sa.Column("article_id", sa.UUID(), nullable=False),
        sa.Column("language_id", sa.VARCHAR(length=10), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("content", sa.TEXT(), nullable=True),
        sa.Column("tsv_content", postgresql.TSVECTOR(), nullable=True),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=False
        ),
        sa.CheckConstraint("length(title) > 0", name="article_title_check"),
        sa.PrimaryKeyConstraint("article_id", "language_id"),
    )
    op.create_table(
        "blog_category",
        sa.Column(
            "blog_category_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("slug", sa.String(length=255), nullable=False),
        sa.Column("image_src", sa.String(length=255), nullable=True),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.CheckConstraint(
            "length(slug) > 0", name="blog_category_slug_check"
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["blog_category.blog_category_id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("blog_category_id"),
        sa.UniqueConstraint("slug"),
    )
    op.create_table(
        "permission",
        sa.Column(
            "permission_id", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.CheckConstraint("length(name) > 0", name="permission_name_check"),
        sa.PrimaryKeyConstraint("permission_id"),
    )
    op.create_table(
        "social_network",
        sa.Column(
            "social_network_id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("link", sa.String(length=255), nullable=False),
        sa.Column("image_src", sa.String(length=255), nullable=False),
        sa.CheckConstraint(
            "length(image_src) > 0", name="social_network_image_src_check"
        ),
        sa.CheckConstraint(
            "length(link) > 0", name="social_network_link_check"
        ),
        sa.CheckConstraint(
            "length(name) > 0", name="social_network_name_check"
        ),
        sa.PrimaryKeyConstraint("social_network_id"),
        sa.UniqueConstraint("link"),
    )
    op.create_table(
        "tag",
        sa.Column("tag_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("slug", sa.String(length=255), nullable=False),
        sa.CheckConstraint("length(slug) > 0", name="tag_slug_check"),
        sa.PrimaryKeyConstraint("tag_id"),
        sa.UniqueConstraint("slug"),
    )
    op.create_table(
        "user_deleted",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("login", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("is_registered", sa.Boolean(), nullable=False),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=False
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_table(
        "role_permission",
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("permission_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"], ["permission.permission_id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.role_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("role_id", "permission_id"),
    )
    op.create_table(
        "user",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("login", sa.String(length=255), nullable=False),
        sa.Column("email", sa.VARCHAR(length=320), nullable=True),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("is_registered", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint("length(email) >= 3", name="user_email_check"),
        sa.CheckConstraint("length(login) > 0", name="user_login_check"),
        sa.CheckConstraint("length(password) > 0", name="user_password_check"),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.role_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("login"),
    )
    op.create_table(
        "article",
        sa.Column("article_id", sa.UUID(), nullable=False),
        sa.Column("author_id", sa.UUID(), nullable=False),
        sa.Column("slug", sa.String(length=255), nullable=False),
        sa.Column("views_count", sa.Integer(), nullable=False),
        sa.Column("image_src", sa.String(length=255), nullable=True),
        sa.CheckConstraint(
            "views_count >= 0", name="article_views_count_check"
        ),
        sa.ForeignKeyConstraint(
            ["author_id"], ["user.user_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("article_id"),
        sa.UniqueConstraint("slug"),
    )
    op.create_table(
        "author_translate",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("language_id", sa.VARCHAR(length=10), nullable=False),
        sa.Column("work_place", sa.String(length=255), nullable=False),
        sa.Column("post", sa.String(length=255), nullable=False),
        sa.Column("awards", sa.TEXT(), nullable=True),
        sa.Column("biography", sa.TEXT(), nullable=True),
        sa.Column("experience", sa.TEXT(), nullable=True),
        sa.Column("education", sa.TEXT(), nullable=True),
        sa.CheckConstraint("length(post) > 0", name="author_post_check"),
        sa.CheckConstraint(
            "length(work_place) > 0", name="author_work_place_check"
        ),
        sa.ForeignKeyConstraint(
            ["language_id"], ["language.language_id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.user_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_id", "language_id"),
    )
    op.create_table(
        "blog_category_translate",
        sa.Column("blog_category_id", sa.Integer(), nullable=False),
        sa.Column("language_id", sa.VARCHAR(length=10), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=False),
        sa.CheckConstraint(
            "length(description) > 0", name="blog_category_description_check"
        ),
        sa.CheckConstraint(
            "length(name) > 0", name="blog_category_name_check"
        ),
        sa.ForeignKeyConstraint(
            ["blog_category_id"],
            ["blog_category.blog_category_id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["language_id"], ["language.language_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("blog_category_id", "language_id"),
    )
    op.create_table(
        "md_user",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("first_name", sa.String(length=255), nullable=False),
        sa.Column("last_name", sa.String(length=255), nullable=False),
        sa.Column("middle_name", sa.String(length=255), nullable=False),
        sa.Column(
            "profile_picture_link", sa.VARCHAR(length=255), nullable=True
        ),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.CheckConstraint(
            "length(first_name) > 0", name="md_user_first_name_check"
        ),
        sa.CheckConstraint(
            "length(last_name) > 0", name="md_user_last_name_check"
        ),
        sa.CheckConstraint(
            "length(middle_name) > 0", name="md_user_middle_name_check"
        ),
        sa.CheckConstraint(
            "length(profile_picture_link) > 0",
            name="md_user_profile_picture_link_check",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.user_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_table(
        "tag_translate",
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.Column("language_id", sa.VARCHAR(length=10), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.CheckConstraint("length(name) > 0", name="tag_name_check"),
        sa.ForeignKeyConstraint(
            ["language_id"], ["language.language_id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"], ["tag.tag_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("tag_id", "language_id"),
        sa.UniqueConstraint(
            "name", "language_id", name="tag_name_language_unique"
        ),
    )
    op.create_table(
        "user_social_network",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("social_network_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["social_network_id"],
            ["social_network.social_network_id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.user_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_id", "social_network_id"),
    )
    op.create_table(
        "article_translate",
        sa.Column("article_id", sa.UUID(), nullable=False),
        sa.Column("language_id", sa.VARCHAR(length=10), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("content", sa.TEXT(), nullable=True),
        sa.Column("tsv_content", postgresql.TSVECTOR(), nullable=True),
        sa.CheckConstraint(
            "length(content) >= 0", name="article_content_check"
        ),
        sa.CheckConstraint("length(title) > 0", name="article_title_check"),
        sa.ForeignKeyConstraint(
            ["article_id"], ["article.article_id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["language_id"], ["language.language_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("article_id", "language_id"),
        sa.UniqueConstraint(
            "title", "language_id", name="article_title_language_unique"
        ),
    )
    op.create_table(
        "city",
        sa.Column("city_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("region_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["region_id"], ["region.region_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("city_id"),
    )
    op.create_table(
        "city_translate",
        sa.Column("city_id", sa.Integer(), nullable=False),
        sa.Column("language_id", sa.VARCHAR(length=10), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.CheckConstraint("length(name) > 0", name="city_name_check"),
        sa.ForeignKeyConstraint(
            ["city_id"], ["city.city_id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["language_id"], ["language.language_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("city_id", "language_id"),
    )
    op.drop_table("education")
    op.drop_table("univercity")
    op.add_column(
        "md_user_deleted",
        sa.Column("first_name", sa.String(length=255), nullable=False),
    )
    op.add_column(
        "md_user_deleted",
        sa.Column("last_name", sa.String(length=255), nullable=False),
    )
    op.add_column(
        "md_user_deleted",
        sa.Column("middle_name", sa.String(length=255), nullable=False),
    )
    op.drop_column("md_user_deleted", "email")
    op.create_foreign_key(
        None,
        "refresh_token",
        "user",
        ["user_id"],
        ["user_id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###
    op.execute("""CREATE OR REPLACE FUNCTION move_to_md_user_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO md_user_deleted (user_id, email, first_name, last_name, middle_name, profile_picture_link, description, deleted_at)
        VALUES (OLD.user_id, OLD.email, OLD.profile_picture_link, OLD.description, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;""")
    op.execute("""CREATE TRIGGER trigger_move_to_md_user_deleted
    BEFORE DELETE ON md_user
    FOR EACH ROW EXECUTE FUNCTION move_to_md_user_deleted();""")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "refresh_token", type_="foreignkey")
    op.add_column(
        "md_user_deleted",
        sa.Column(
            "email", sa.VARCHAR(length=320), autoincrement=False, nullable=True
        ),
    )
    op.drop_column("md_user_deleted", "middle_name")
    op.drop_column("md_user_deleted", "last_name")
    op.drop_column("md_user_deleted", "first_name")
    op.create_table(
        "univercity",
        sa.Column(
            "univercity_id", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "city_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "name", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.CheckConstraint(
            "length(name::text) > 0", name="univercity_name_check"
        ),
        sa.PrimaryKeyConstraint("univercity_id", name="univercity_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "education",
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "univercity_id", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "faculty_name",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "education_starts", sa.DATE(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "education_ends", sa.DATE(), autoincrement=False, nullable=False
        ),
        sa.CheckConstraint(
            "length(faculty_name::text) > 0",
            name=op.f("education_faculty_name_check"),
        ),
        sa.ForeignKeyConstraint(
            ["univercity_id"],
            ["univercity.univercity_id"],
            name=op.f("education_univercity_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "univercity_id", name=op.f("education_pkey")
        ),
    )
    op.drop_table("city_translate")
    op.drop_table("city")
    op.drop_table("article_translate")
    op.drop_table("user_social_network")
    op.drop_table("tag_translate")
    op.drop_table("md_user")
    op.drop_table("blog_category_translate")
    op.drop_table("author_translate")
    op.drop_table("article")
    op.drop_table("user")
    op.drop_table("role_permission")
    op.drop_table("user_deleted")
    op.drop_table("tag")
    op.drop_table("social_network")
    op.drop_table("permission")
    op.drop_table("blog_category")
    op.drop_table("article_translate_deleted")
    op.drop_table("article_deleted")
    # ### end Alembic commands ###
    op.execute("""CREATE OR REPLACE FUNCTION move_to_md_user_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO md_user_deleted (user_id, email, profile_picture_link, description, deleted_at)
        VALUES (OLD.user_id, OLD.email, OLD.profile_picture_link, OLD.description, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;""")
    op.execute("""CREATE TRIGGER trigger_move_to_md_user_deleted
    BEFORE DELETE ON md_user
    FOR EACH ROW EXECUTE FUNCTION move_to_md_user_deleted();""")
