"""feat: init database

Revision ID: a1bb00029f96
Revises: 
Create Date: 2025-06-29 14:49:13.576038

"""
from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a1bb00029f96'
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('aroma',
    sa.Column('aroma_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('aroma_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('country',
    sa.Column('country_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('flag_url', sa.String(length=256), nullable=True, comment='The url to the country flag image'),
    sa.PrimaryKeyConstraint('country_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('presentation_type',
    sa.Column('presentation_type_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('presentation_type_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('role',
    sa.Column('role_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=256), nullable=False),
    sa.CheckConstraint('length(name) > 0', name='role_name_check'),
    sa.PrimaryKeyConstraint('role_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('wine_category',
    sa.Column('wine_category_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('wine_category_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('wine_type',
    sa.Column('wine_type_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('wine_type_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('product',
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=256), nullable=False),
    sa.Column('price', postgresql.MONEY(), nullable=False),
    sa.Column('discount', sa.NUMERIC(precision=3, scale=2), nullable=False),
    sa.Column('main_image_link', sa.String(length=255), nullable=True),
    sa.Column('video_link', sa.String(length=255), nullable=True),
    sa.Column('presentation_type_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('discount >= 0', name='check_discount_positive'),
    sa.CheckConstraint('price::numeric >= 0', name='check_price_positive'),
    sa.ForeignKeyConstraint(['presentation_type_id'], ['presentation_type.presentation_type_id'], ),
    sa.PrimaryKeyConstraint('product_id')
    )
    op.create_table('region',
    sa.Column('region_id', sa.Integer(), nullable=False),
    sa.Column('country_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['country.country_id'], ),
    sa.PrimaryKeyConstraint('region_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('login', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('length(login) > 0', name='user_login_check'),
    sa.CheckConstraint('length(password) > 0', name='user_password_check'),
    sa.ForeignKeyConstraint(['role_id'], ['role.role_id'], ),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('login')
    )
    op.create_table('grape',
    sa.Column('grape_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('region_id', sa.Integer(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['region_id'], ['region.region_id'], ),
    sa.PrimaryKeyConstraint('grape_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('refresh_token',
    sa.Column('refresh_token_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('expire_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('refresh_token_id')
    )
    op.create_table('wine',
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('volume', sa.NUMERIC(precision=4, scale=2), nullable=False),
    sa.Column('wine_strength', sa.NUMERIC(precision=5, scale=2), nullable=True),
    sa.Column('harvest_year', sa.DATE(), nullable=False),
    sa.Column('production_method_description', sa.TEXT(), nullable=True),
    sa.Column('taste_description', sa.TEXT(), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('min_serving_temperature', sa.SMALLINT(), nullable=True),
    sa.Column('max_serving_temperature', sa.SMALLINT(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint("harvest_year >= '1900-01-01' AND harvest_year <= CURRENT_DATE", name='check_harvest_year'),
    sa.CheckConstraint('volume > 0', name='check_volume_positive'),
    sa.CheckConstraint('wine_strength >= 0', name='check_wine_strength_non_negative'),
    sa.ForeignKeyConstraint(['product_id'], ['product.product_id'], ),
    sa.PrimaryKeyConstraint('product_id')
    )
    op.create_table('aroma_wine',
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('aroma_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['aroma_id'], ['aroma.aroma_id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['wine.product_id'], ),
    sa.PrimaryKeyConstraint('product_id', 'aroma_id')
    )
    op.create_table('black_refresh_token_list',
    sa.Column('refresh_token_id', sa.UUID(), nullable=False),
    sa.Column('ban_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['refresh_token_id'], ['refresh_token.refresh_token_id'], ),
    sa.PrimaryKeyConstraint('refresh_token_id')
    )
    op.create_table('sort',
    sa.Column('grape_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('percentage_content', sa.NUMERIC(precision=5, scale=2), nullable=False),
    sa.CheckConstraint('percentage_content > 0', name='check_percentage_content_positive'),
    sa.ForeignKeyConstraint(['grape_id'], ['grape.grape_id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.product_id'], ),
    sa.PrimaryKeyConstraint('grape_id', 'product_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sort')
    op.drop_table('black_refresh_token_list')
    op.drop_table('aroma_wine')
    op.drop_table('wine')
    op.drop_table('refresh_token')
    op.drop_table('grape')
    op.drop_table('user')
    op.drop_table('region')
    op.drop_table('product')
    op.drop_table('wine_type')
    op.drop_table('wine_category')
    op.drop_table('role')
    op.drop_table('presentation_type')
    op.drop_table('country')
    op.drop_table('aroma')
    # ### end Alembic commands ###
