"""fix: rewrite tsv_content trigger. Now it's doesn't remove digits.

Revision ID: 1a7ea0cbb653
Revises: 4906a75d7ed2
Create Date: 2025-07-21 01:44:04.524795

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "1a7ea0cbb653"
down_revision: str | Sequence[str] | None = "4906a75d7ed2"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
    op.execute("""
        CREATE OR REPLACE FUNCTION update_tsvector()
        RETURNS TRIGGER AS $$
        DECLARE
            language VARCHAR = (
                SELECT cfgname
                FROM language
                WHERE language_id = NEW.language_id
            );
            to_tsv_title varchar = regexp_replace(NEW.title, '[^[:alnum:] ]', '', 'g'); -- оставляем цифры
            to_tsv_content text = regexp_replace(regexp_replace(NEW.content, '<br />', '', 'g'), '[^[:alnum:] ]', '', 'g'); -- оставляем цифры
        BEGIN
            IF EXISTS (SELECT 1 FROM pg_ts_config WHERE cfgname = language) THEN
                NEW.tsv_content :=
                    setweight(to_tsvector(language::regconfig, to_tsv_title), 'A') ||
                    setweight(to_tsvector(language::regconfig, to_tsv_content), 'B');
            ELSE
                NEW.tsv_content :=
                    setweight(to_tsvector('simple'::regconfig, to_tsv_title), 'A') ||
                    setweight(to_tsvector('simple'::regconfig, to_tsv_content), 'B');
            END IF;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
    op.execute("""
        CREATE OR REPLACE FUNCTION update_tsvector()
        RETURNS TRIGGER AS $$
        DECLARE
            language VARCHAR = (
                SELECT cfgname
                FROM language
                WHERE language_id = NEW.language_id
            );
            to_tsv_title varchar = regexp_replace(NEW.title, '[^[:alpha:] ]', '', 'g');
            to_tsv_content text = regexp_replace(regexp_replace(NEW.content, '<br />, '', 'g'), '[^[:alpha:] ]', '', 'g');
        BEGIN
            IF EXISTS (SELECT 1 FROM pg_ts_config WHERE cfgname = language) THEN
                NEW.tsv_content :=
                    setweight(to_tsvector(language::regconfig, to_tsv_title), 'A') ||
                    setweight(to_tsvector(language::regconfig, to_tsv_content), 'B');
            ELSE
            NEW.tsv_content :=
                setweight(to_tsvector('simple'::regconfig, to_tsv_title), 'A') ||
                setweight(to_tsvector('simple'::regconfig, to_tsv_content), 'B');
            END IF;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;;
        """)
