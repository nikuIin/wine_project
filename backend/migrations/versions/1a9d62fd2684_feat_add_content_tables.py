"""feat: add content tables

Revision ID: 1a9d62fd2684
Revises: 1a7ea0cbb653
Create Date: 2025-07-26 17:25:52.733462

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "1a9d62fd2684"
down_revision: str | Sequence[str] | None = "1a7ea0cbb653"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "content_deleted",
        sa.Column("content_id", sa.UUID(), nullable=False),
        sa.Column("language_id", sa.String(length=10), nullable=False),
        sa.Column("md_title", sa.Text(), nullable=False),
        sa.Column("md_description", sa.Text(), nullable=False),
        sa.Column(
            "content", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("content_id", "language_id"),
    )
    op.create_table(
        "content",
        sa.Column("content_id", sa.UUID(), nullable=False),
        sa.Column("language_id", sa.String(length=10), nullable=False),
        sa.Column("md_title", sa.Text(), nullable=False),
        sa.Column("md_description", sa.Text(), nullable=False),
        sa.Column(
            "content", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "length(md_description) > 0", name="content_md_description_check"
        ),
        sa.CheckConstraint(
            "length(md_title) > 0", name="content_md_title_check"
        ),
        sa.ForeignKeyConstraint(
            ["language_id"], ["language.language_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("content_id", "language_id"),
        sa.UniqueConstraint("md_title"),
    )
    # ### end Alembic commands ###

    op.execute("""
        create or replace function move_to_content_deleted()
        returns trigger as $$
        begin
            insert into content_deleted (content_id, language_id, md_title, md_description, content, created_at, updated_at, deleted_at)
            values (old.content_id, old.language_id, old.md_title, old.md_description, old.content, old.created_at, old.updated_at, current_timestamp)
            on conflict (content_id, language_id)
            do update set
                md_title = excluded.md_title,
                md_description = excluded.md_description,
                content = excluded.content,
                created_at = excluded.created_at,
                updated_at = excluded.updated_at,
                deleted_at = current_timestamp;
            return old;
        end;
        $$ language plpgsql;
    """)

    op.execute(
        """
        create trigger trigger_move_to_content_deleted
        before delete on content
        for each row execute function move_to_content_deleted();
        """
    )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("content")
    op.drop_table("content_deleted")
    # ### end Alembic commands ###
    op.execute("drop trigger if exists trigger_move_to_content_deleted;")
    op.execute("drop function if exists move_to_content_deleted")
