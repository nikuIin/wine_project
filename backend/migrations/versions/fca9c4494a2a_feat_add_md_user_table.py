"""feat: add md_user table

Revision ID: fca9c4494a2a
Revises: 5fbbe2ffe8d4
Create Date: 2025-07-11 03:28:02.063720

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "fca9c4494a2a"
down_revision: str | Sequence[str] | None = "5fbbe2ffe8d4"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "md_user_deleted",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("email", sa.VARCHAR(length=320), nullable=True),
        sa.Column(
            "profile_picture_link", sa.VARCHAR(length=255), nullable=True
        ),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=False
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_table(
        "md_user",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("email", sa.VARCHAR(length=320), nullable=True),
        sa.Column(
            "profile_picture_link", sa.VARCHAR(length=255), nullable=True
        ),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.CheckConstraint("length(email) >= 3", name="md_user_email_check"),
        sa.CheckConstraint(
            "length(profile_picture_link) > 0",
            name="md_user_profile_picture_link_check",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.user_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.drop_column("country_deleted", "created_at")
    op.drop_column("country_deleted", "updated_at")
    # ### end Alembic commands ###
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_md_user_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO md_user_deleted (user_id, email, profile_picture_link, description, deleted_at)
        VALUES (OLD.user_id, OLD.email, OLD.profile_picture_link, OLD.description, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_md_user_deleted
    BEFORE DELETE ON md_user
    FOR EACH ROW EXECUTE FUNCTION move_to_md_user_deleted();
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "country_deleted",
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "country_deleted",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_table("md_user")
    op.drop_table("md_user_deleted")
    # ### end Alembic commands ###
    op.execute(
        """
    DROP TRIGGER IF EXISTS trigger_move_to_md_user_deleted ON country;
    """
    )
    op.execute(
        """
    DROP FUNCTION IF EXISTS move_to_md_user_deleted();
    """
    )
