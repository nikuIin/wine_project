"""feat: refromat tokens tables

Revision ID: 5ff22cfba6c5
Revises: bfb23703c043
Create Date: 2025-08-13 15:40:28.286338

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "5ff22cfba6c5"
down_revision: str | Sequence[str] | None = "bfb23703c043"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("black_refresh_token_list")
    op.add_column(
        "refresh_token",
        sa.Column("fingerprint", sa.String(length=255), nullable=False),
    )
    op.add_column(
        "refresh_token", sa.Column("ip", sa.String(length=255), nullable=True)
    )
    op.add_column(
        "refresh_token", sa.Column("is_blocked", sa.Boolean(), nullable=False)
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("refresh_token", "is_blocked")
    op.drop_column("refresh_token", "ip")
    op.drop_column("refresh_token", "fingerprint")
    op.create_table(
        "black_refresh_token_list",
        sa.Column(
            "refresh_token_id", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "ban_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["refresh_token_id"],
            ["refresh_token.refresh_token_id"],
            name=op.f("black_refresh_token_list_refresh_token_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "refresh_token_id", name=op.f("black_refresh_token_list_pkey")
        ),
    )
    # ### end Alembic commands ###
