"""fix: rewrite save deleted md_user trigger

Revision ID: 0d30d0aacd26
Revises: f8621ef68817
Create Date: 2025-09-01 16:17:49.473801

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0d30d0aacd26"
down_revision: str | Sequence[str] | None = "f8621ef68817"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "md_user_deleted",
        "first_name",
        existing_type=sa.VARCHAR(length=255),
        nullable=True,
    )
    op.alter_column(
        "md_user_deleted",
        "last_name",
        existing_type=sa.VARCHAR(length=255),
        nullable=True,
    )
    op.alter_column(
        "md_user_deleted",
        "middle_name",
        existing_type=sa.VARCHAR(length=255),
        nullable=True,
    )
    op.alter_column(
        "refresh_token",
        "fingerprint",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
    op.execute("""
        CREATE OR REPLACE FUNCTION move_to_md_user_deleted()
        RETURNS TRIGGER AS $$
        BEGIN
            INSERT INTO md_user_deleted (user_id, first_name, last_name, middle_name, profile_picture_link, description, deleted_at)
            VALUES (OLD.user_id, OLD.first_name, OLD.last_name, OLD.middle_name, OLD.profile_picture_link, OLD.description, NOW())
            ON CONFLICT (user_id) DO UPDATE SET first_name = EXCLUDED.first_name, last_name = EXCLUDED.last_name, middle_name = EXCLUDED.middle_name, profile_picture_link = EXCLUDED.profile_picture_link, description = EXCLUDED.description, deleted_at = NOW();
            RETURN OLD;
        END;
        $$ LANGUAGE plpgsql;
        """)
    op.execute("""
        CREATE OR REPLACE FUNCTION move_to_user_deleted()
        RETURNS TRIGGER AS $$
        BEGIN
            INSERT INTO user_deleted (user_id, login, email, password, role_id, is_registered, deleted_at)
            VALUES (OLD.user_id, OLD.login, OLD.email, OLD.password, OLD.role_id, OLD.is_registered, NOW())
            ON CONFLICT (user_id) DO UPDATE SET email = EXLEDED.email, login = EXCLUDED.login, password = EXCLUDED.password, role_id = EXCLUDED.role_id, is_registered = EXCLUDED.is_registered, deleted_at = NOW();
            RETURN OLD;
        END;
        $$ LANGUAGE plpgsql;""")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "refresh_token",
        "fingerprint",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "md_user_deleted",
        "middle_name",
        existing_type=sa.VARCHAR(length=255),
        nullable=False,
    )
    op.alter_column(
        "md_user_deleted",
        "last_name",
        existing_type=sa.VARCHAR(length=255),
        nullable=False,
    )
    op.alter_column(
        "md_user_deleted",
        "first_name",
        existing_type=sa.VARCHAR(length=255),
        nullable=False,
    )
    # ### end Alembic commands ###
