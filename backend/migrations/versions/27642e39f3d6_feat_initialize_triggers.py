"""feat: initialize triggers

Revision ID: 27642e39f3d6
Revises: c47932b4dd49
Create Date: 2025-07-17 08:39:27.303432

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "27642e39f3d6"
down_revision: str | Sequence[str] | None = "c47932b4dd49"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
    # Country
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_country_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO country_deleted (country_id, flag_id, deleted_at)
        VALUES (OLD.country_id, OLD.flag_id, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_country_deleted
    BEFORE DELETE ON country
    FOR EACH ROW EXECUTE FUNCTION move_to_country_deleted();
    """)
    # CountryTranslate
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_country_translate_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO country_translate_deleted (country_id, language_id, name, deleted_at)
        VALUES (OLD.country_id, OLD.language_id, OLD.name, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_country_translate_deleted
    BEFORE DELETE ON country_translate
    FOR EACH ROW EXECUTE FUNCTION move_to_country_translate_deleted();
    """)
    # Region
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_region_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO region_deleted (region_id, country_id, deleted_at)
        VALUES (OLD.region_id, OLD.country_id, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_region_deleted
    BEFORE DELETE ON region
    FOR EACH ROW EXECUTE FUNCTION move_to_region_deleted();
    """)
    # RegionTranslate
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_region_translate_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO region_translate_deleted (region_id, language_id, name, deleted_at)
        VALUES (OLD.region_id, OLD.language_id, OLD.name, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_region_translate_deleted
    BEFORE DELETE ON region_translate
    FOR EACH ROW EXECUTE FUNCTION move_to_region_translate_deleted();
    """)
    # Grape
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_grape_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO grape_deleted (grape_id, region_id, deleted_at)
        VALUES (OLD.grape_id, OLD.region_id, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_grape_deleted
    BEFORE DELETE ON grape
    FOR EACH ROW EXECUTE FUNCTION move_to_grape_deleted();
    """)
    # GrapeTranslate
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_grape_translate_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO grape_translate_deleted (grape_id, language_id, name, deleted_at)
        VALUES (OLD.grape_id, OLD.language_id, OLD.name, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_grape_translate_deleted
    BEFORE DELETE ON grape_translate
    FOR EACH ROW EXECUTE FUNCTION move_to_grape_translate_deleted();
    """)
    # Product
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_product_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO product_deleted (product_id, price, discount, main_image_link, video_link, presentation_type_id, deleted_at)
        VALUES (OLD.product_id, OLD.price, OLD.discount, OLD.main_image_link, OLD.video_link, OLD.presentation_type_id, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_product_deleted
    BEFORE DELETE ON product
    FOR EACH ROW EXECUTE FUNCTION move_to_product_deleted();
    """)
    # ProductTranslate
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_product_translate_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO product_translate_deleted (product_id, language_id, name, deleted_at)
        VALUES (OLD.product_id, OLD.language_id, OLD.name, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_product_translate_deleted
    BEFORE DELETE ON product_translate
    FOR EACH ROW EXECUTE FUNCTION move_to_product_translate_deleted();
    """)
    # WineCategory
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_wine_category_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO wine_category_deleted (wine_category_id, deleted_at)
        VALUES (OLD.wine_category_id, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_wine_category_deleted
    BEFORE DELETE ON wine_category
    FOR EACH ROW EXECUTE FUNCTION move_to_wine_category_deleted();
    """)
    # WineCategoryTranslate
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_wine_category_translate_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO wine_category_translate_deleted (wine_category_id, language_id, name, deleted_at)
        VALUES (OLD.wine_category_id, OLD.language_id, OLD.name, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_wine_category_translate_deleted
    BEFORE DELETE ON wine_category_translate
    FOR EACH ROW EXECUTE FUNCTION move_to_wine_category_translate_deleted();
    """)
    # WineType
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_wine_type_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO wine_type_deleted (wine_type_id, deleted_at)
        VALUES (OLD.wine_type_id, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_wine_type_deleted
    BEFORE DELETE ON wine_type
    FOR EACH ROW EXECUTE FUNCTION move_to_wine_type_deleted();
    """)
    # WineTypeTranslate
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_wine_type_translate_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO wine_type_translate_deleted (wine_type_id, language_id, name, deleted_at)
        VALUES (OLD.wine_type_id, OLD.language_id, OLD.name, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_wine_type_translate_deleted
    BEFORE DELETE ON wine_type_translate
    FOR EACH ROW EXECUTE FUNCTION move_to_wine_type_translate_deleted();
    """)
    # Aroma
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_aroma_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO aroma_deleted (aroma_id, deleted_at)
        VALUES (OLD.aroma_id, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_aroma_deleted
    BEFORE DELETE ON aroma
    FOR EACH ROW EXECUTE FUNCTION move_to_aroma_deleted();
    """)
    # AromaTranslate
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_aroma_translate_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO aroma_translate_deleted (aroma_id, language_id, name, deleted_at)
        VALUES (OLD.aroma_id, OLD.language_id, OLD.name, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_aroma_translate_deleted
    BEFORE DELETE ON aroma_translate
    FOR EACH ROW EXECUTE FUNCTION move_to_aroma_translate_deleted();
    """)
    # Sort
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_sort_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO sort_deleted (grape_id, product_id, percentage_content, deleted_at)
        VALUES (OLD.grape_id, OLD.product_id, OLD.percentage_content, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_sort_deleted
    BEFORE DELETE ON sort
    FOR EACH ROW EXECUTE FUNCTION move_to_sort_deleted();
    """)
    # Wine
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_wine_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO wine_deleted (product_id, volume, wine_strength, harvest_year, wine_type_id, wine_category_id, min_serving_temperature, max_serving_temperature, deleted_at)
        VALUES (OLD.product_id, OLD.volume, OLD.wine_strength, OLD.harvest_year, OLD.wine_type_id, OLD.wine_category_id, OLD.min_serving_temperature, OLD.max_serving_temperature, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_wine_deleted
    BEFORE DELETE ON wine
    FOR EACH ROW EXECUTE FUNCTION move_to_wine_deleted();
    """)
    # WineTranslate
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_wine_translate_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO wine_translate_deleted (wine_id, language_id, production_method_description, description, deleted_at)
        VALUES (OLD.wine_id, OLD.language_id, OLD.production_method_description, OLD.description, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_wine_translate_deleted
    BEFORE DELETE ON wine_translate
    FOR EACH ROW EXECUTE FUNCTION move_to_wine_translate_deleted();
    """)
    # AromaWine
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_aroma_wine_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO aroma_wine_deleted (product_id, aroma_id, deleted_at)
        VALUES (OLD.product_id, OLD.aroma_id, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_aroma_wine_deleted
    BEFORE DELETE ON aroma_wine
    FOR EACH ROW EXECUTE FUNCTION move_to_aroma_wine_deleted();
    """)
    # User
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_user_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO user_deleted (user_id, login, password, role_id, is_registered, deleted_at)
        VALUES (OLD.user_id, OLD.login, OLD.password, OLD.role_id, OLD.is_registered, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_user_deleted
    BEFORE DELETE ON "user"
    FOR EACH ROW EXECUTE FUNCTION move_to_user_deleted();
    """)
    # MdUser
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_md_user_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO md_user_deleted (user_id, first_name, last_name, middle_name, profile_picture_link, description, deleted_at)
        VALUES (OLD.user_id, OLD.first_name, OLD.last_name, OLD.middle_name, OLD.profile_picture_link, OLD.description, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_md_user_deleted
    BEFORE DELETE ON md_user
    FOR EACH ROW EXECUTE FUNCTION move_to_md_user_deleted();
    """)
    # Article
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_article_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO article_deleted (article_id, author_id, slug, views_count, deleted_at, created_at, updated_at)
        VALUES (OLD.article_id, OLD.author_id, OLD.slug, OLD.views_count, NOW(), OLD.created_at, OLD.updated_at);
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_article_deleted
    BEFORE DELETE ON article
    FOR EACH ROW EXECUTE FUNCTION move_to_article_deleted();
    """)
    # ArticleTranslate
    op.execute("""
    CREATE OR REPLACE FUNCTION move_to_article_translate_deleted()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO article_translate_deleted (article_id, language_id, image_src, title, content, tsv_content, deleted_at)
        VALUES (OLD.article_id, OLD.language_id, OLD.image_src, OLD.title, OLD.content, OLD.tsv_content, NOW());
        RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
    op.execute("""
    CREATE TRIGGER trigger_move_to_article_translate_deleted
    BEFORE DELETE ON article_translate
    FOR EACH ROW EXECUTE FUNCTION move_to_article_translate_deleted();
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_country_deleted ON country;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_country_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_country_translate_deleted ON country_translate;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_country_translate_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_region_deleted ON region;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_region_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_region_translate_deleted ON region_translate;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_region_translate_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_grape_deleted ON grape;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_grape_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_grape_translate_deleted ON grape_translate;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_grape_translate_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_product_deleted ON product;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_product_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_product_translate_deleted ON product_translate;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_product_translate_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_wine_category_deleted ON wine_category;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_wine_category_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_wine_category_translate_deleted ON wine_category_translate;"
    )
    op.execute(
        "DROP FUNCTION IF EXISTS move_to_wine_category_translate_deleted;"
    )
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_wine_type_deleted ON wine_type;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_wine_type_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_wine_type_translate_deleted ON wine_type_translate;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_wine_type_translate_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_aroma_deleted ON aroma;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_aroma_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_aroma_translate_deleted ON aroma_translate;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_aroma_translate_deleted;")
    op.execute("DROP TRIGGER IF EXISTS trigger_move_to_sort_deleted ON sort;")
    op.execute("DROP FUNCTION IF EXISTS move_to_sort_deleted;")
    op.execute("DROP TRIGGER IF EXISTS trigger_move_to_wine_deleted ON wine;")
    op.execute("DROP FUNCTION IF EXISTS move_to_wine_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_wine_translate_deleted ON wine_translate;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_wine_translate_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_aroma_wine_deleted ON aroma_wine;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_aroma_wine_deleted;")
    op.execute(
        'DROP TRIGGER IF EXISTS trigger_move_to_user_deleted ON "user";'
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_user_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_md_user_deleted ON md_user;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_md_user_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_article_deleted ON article;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_article_deleted;")
    op.execute(
        "DROP TRIGGER IF EXISTS trigger_move_to_article_translate_deleted ON article_translate;"
    )
    op.execute("DROP FUNCTION IF EXISTS move_to_article_translate_deleted;")
